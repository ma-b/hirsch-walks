var documenterSearchIndex = {"docs":
[{"location":"man/representation/#Representation","page":"Representation","title":"Representation","text":"","category":"section"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"DocTestSetup = quote\n    import Polyhedra\nend","category":"page"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"Spindles","category":"page"},{"location":"man/representation/#Spindles","page":"Representation","title":"Spindles","text":"Main module. The public API is listed here.\n\n\n\n\n\n","category":"module"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"The main type defined by Spindles.jl is","category":"page"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"Spindle","category":"page"},{"location":"man/representation/#Spindles.Spindle","page":"Representation","title":"Spindles.Spindle","text":"Spindle{T}\n\nMain type that represents a spindle.\n\n\n\n\n\n","category":"type"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"There are two possible ways to construct objects of this type. The first way explicitly uses  Polyhedra:","category":"page"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"Spindle(p::Polyhedra.Polyhedron)","category":"page"},{"location":"man/representation/#Spindles.Spindle-Tuple{Polyhedron}","page":"Representation","title":"Spindles.Spindle","text":"Spindle{T}(p::Polyhedra.Polyhedron{T})\n\nCreate a spindle from the polyhedron p. If p is unbounded or there are no two apices among its vertices, throw an error. \n\nIf not specified, the element type T is the element type of p.\n\nSee also Polyhedra.polyhedron.\n\nExamples\n\njulia> using Polyhedra: polyhedron, vrep, hrep\n\njulia> p = polyhedron(vrep([0 0; 1 0; 0 1; 1 1]));\n\njulia> Spindle(p)\nSpindle{Rational{BigInt}}\n\ncreates the two-dimensional 0/1 cube whose vertices are (00)(10)(01), and (11). To construct from  such a V-representation a polyhedron that can be passed to the Spindle constructor, we used  Polyhedra.vrep.  Equivalently, we could have created it from an inequality description (an H-representation), for example from the system of inequalities\n\nbeginaligned\n0 le x_1 le 1 \n0 le x_2 le 1\nendaligned\n\nUsing Polyhedra.hrep,  this translates to\n\njulia> p = polyhedron(hrep([-1 0; 1 0; 0 -1; 0 1], [0, 1, 0, 1]));\n\njulia> Spindle(p)\nSpindle{Rational{BigInt}}\n\nNote that the 0/1 cube is a spindle. However, if we drop any of its vertices, this property is lost:\n\njulia> p = polyhedron(vrep([0 0; 1 0; 0 1]));\n\njulia> Spindle(p)\nERROR: ArgumentError: not a spindle: cannot find two apices\n[...]\n\nSimilarly, trying to create a spindle from a proper subset of the inequalities in the H-representation above results in an error:\n\njulia> p = polyhedron(hrep([-1 0; 1 0; 0 -1], [0, 1, 0]));\n\njulia> Spindle(p)\nERROR: ArgumentError: got an unbounded polyhedron\n[...]\n\n\n\n\n\n","category":"method"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"To make spindle constructions more convenient, there is a second constructor  that accepts the data of an H-representation and does not require any imports from Polyhedra:","category":"page"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"Spindle(A::AbstractMatrix{<:Real}, b::AbstractVector{<:Real}, lib::Union{Nothing, Polyhedra.Library}=nothing)","category":"page"},{"location":"man/representation/#Spindles.Spindle-2","page":"Representation","title":"Spindles.Spindle","text":"Spindle(A::AbstractMatrix, b::AbstractVector [, lib::Polyhedra.Library])\n\nCreate a spindle from its H-representation Ax le b. The optional argument lib specifies a library for polyhedral computations (the \"backend\" of Polyhedra.jl) and is passed to Polyhedra.hrep. If unspecified, use the default library implemented in Polyhedra.\n\nnote: Info\nSpindle(A, b, lib) is equivalent to Spindle(polyhedron(hrep(A, b), lib)).\n\nSee also the Polyhedra.jl documentation on libraries. A list of all supported libraries can be found on the JuliaPolyhedra website.\n\nExamples\n\nTo use CDDLib with exact rational arithmetic, do\n\nimport CDDLib\nSpindle(A, b, CDDLib.Library(:exact))\n\nnote: Note\nIf the lib argument is not specified, Spindle will infer the type of arithmetic used from the input data. This behaviour is inherited from the default library in Polyhedra. For example, changing some of the entries of the coefficient matrix in the examples above to floats producesjulia> Spindle([-1.0 0.0; 1 0; 0 -1; 0 1], [0, 1, 0, 1])\nSpindle{Float64}as opposed to Spindle{Rational{BigInt}}.\n\n\n\n\n\n","category":"type"},{"location":"man/representation/#Vertices-and-apices","page":"Representation","title":"Vertices and apices","text":"","category":"section"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"Spindles.vertices","category":"page"},{"location":"man/representation/#Spindles.vertices","page":"Representation","title":"Spindles.vertices","text":"vertices(s::Spindle)\n\nReturns an iterator over the vertices of the spindle s.\n\n\n\n\n\n","category":"function"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"nvertices","category":"page"},{"location":"man/representation/#Spindles.nvertices","page":"Representation","title":"Spindles.nvertices","text":"nvertices(s::Spindle)\n\nCount the vertices of s.\n\n\n\n\n\n","category":"function"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"apices","category":"page"},{"location":"man/representation/#Spindles.apices","page":"Representation","title":"Spindles.apices","text":"apices(s::Spindle)\n\nReturn the indices of a pair of vertices (the apices) of s for which each facet of s  is incident to exactly one of them.\n\n\n\n\n\n","category":"function"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"setapex!","category":"page"},{"location":"man/representation/#Spindles.setapex!","page":"Representation","title":"Spindles.setapex!","text":"setapex!(s::Spindle, apex::Int)\n\nTry to find the index v of a vertex of s such that v and apex are apices of s. If successful, overwrite the apices of s, or throw an error otherwise.\n\nExamples\n\njulia> square = Spindle([1 0; 0 1; -1 0; 0 -1], [1, 1, 1, 1]);\n\njulia> vertices(square)\n4-element iterator of Vector{Rational{BigInt}}:\n Rational{BigInt}[-1, -1]\n Rational{BigInt}[1, -1]\n Rational{BigInt}[-1, 1]\n Rational{BigInt}[1, 1]\n\njulia> apices(square)\n2-element Vector{Int64}:\n 1\n 4\n\njulia> setapex!(square, 2);\n\njulia> apices(square)\n2-element Vector{Int64}:\n 2\n 3\n\n\n\n\n\n","category":"function"},{"location":"man/representation/#Incidence","page":"Representation","title":"Incidence","text":"","category":"section"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"incidentvertices","category":"page"},{"location":"man/representation/#Spindles.incidentvertices","page":"Representation","title":"Spindles.incidentvertices","text":"incidentvertices(s::Spindle, facets)\n\nList the indices of all vertices of the spindle s that are incident with facets.\n\nnote: Note\nincidentvertices(s, Int[]) is equivalent to collect(1:nvertices(s)).\n\n\n\n\n\n","category":"function"},{"location":"man/representation/#Dimension","page":"Representation","title":"Dimension","text":"","category":"section"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"Spindles.dim","category":"page"},{"location":"man/representation/#Spindles.dim","page":"Representation","title":"Spindles.dim","text":"dim(s::Spindle)\n\nCompute the dimension of the spindle s.\n\nThis is done by computing the length of a maximal chain in the face poset of s, i.e., a finite sequence of faces \n\nemptyset = F_-1 subsetneq F_0 subsetneq F_1 subsetneq dots subsetneq F_d\n\nfor which d is maximal among all such sequences. Then F_d must be s itself, and d is its dimension.\n\nSee also Polyhedra.dim.\n\n\n\n\n\n","category":"function"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"DocTestSetup = nothing","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"EditURL = \"../../../examples/hirsch-ii.jl\"","category":"page"},{"location":"tutorials/hirsch-ii/#Spindles-and-the-Hirsch-conjecture-II","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"","category":"section"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"(Image: )","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"In the second part of the tutorial, we will be analyzing the lowest-dimensional counterexample to the (bounded) Hirsch conjecture known to date. It is a spindle with 40 facets in dimension 20 that is constructed from a 5-dimensional \"base\" spindle found by Matschke, Santos, and Weibel. Following the terminology of part I of this tutorial, our goal is to find good 2-faces.","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"note: Note\nThis example is also available as a Jupyter notebook. Click on the badge above to view it in nbviewer.","category":"page"},{"location":"tutorials/hirsch-ii/#Dimension-5","page":"Spindles and the Hirsch conjecture II","title":"Dimension 5","text":"","category":"section"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"To begin, let us enumerate the good 2-faces of the 5-dimensional spindle.","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"using Spindles\nA, b, = readineq(\"../../../examples/s-25-5.txt\", BigInt)\ns = Spindle(A, b)","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"note: Note\nWe created the spindle s from rational data with numerators and denominators of type BigInt (this is the second argument passed to readineq). Choosing Int here (as in part I of this tutorial) would have produced an integer overflow error. See also the section on arbitrary-precision arithmetic in the Julia language documentation.","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"The following code finds all good 2-faces of s.","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"goodfaces = []\nfor f in sort(facesofdim(s, 2))\n    fstate = isgood2face(s, f)\n    if fstate.good\n        push!(goodfaces, fstate)\n    end\nend\nlength(goodfaces)","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"Next, let's plot the graph of each of those 32 good 2-faces:","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"using Plots\n\ndist_labels = map(1:nvertices(s)) do v\n    \"$v\\n\" * join(dist.((s,), apices(s), v), \" | \")\nend\n\nplot_arr = []\nfor fstate in goodfaces\n    push!(plot_arr,\n        plot2face(s, fstate.facets;\n            vertexlabels=dist_labels, usecoordinates=false, directed_edges=fstate.edges\n        )\n    )\nend\n\nncols = 4\nnrows = ceil(Int, length(plot_arr) / ncols)\nplot(plot_arr..., layout=(nrows, ncols), size=(1000, nrows*300))","category":"page"},{"location":"tutorials/hirsch-ii/#Dimension-20","page":"Spindles and the Hirsch conjecture II","title":"Dimension 20","text":"","category":"section"},{"location":"tutorials/hirsch-ii/#Warm-up:-Patterns-in-the-inequality-description","page":"Spindles and the Hirsch conjecture II","title":"Warm-up: Patterns in the inequality description","text":"","category":"section"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"Let us first take a look at the inequality description of the 20-dimensional spindle. A minimal description is provided in the file s-25.txt. Its contents are as follows:","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"print(read(\"../../../examples/s-25.txt\", String))","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"You may notice that the coefficients in the first couple of columns are very similar to those of A, the coefficient matrix of the 5-dimensional \"base\" spindle s. This similarity is no coincidence: the matrix encoded in the file above is derived from A in a highly structured way. Each row has a \"counterpart\" in A. For convenience, each row above is already labeled by the index of its \"counterpart\". For example, the labels of the first three rows (the numbers in the first column) are","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"[3, 7, 2]","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"and the corresponding rows of A are","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"A[[3, 7, 2],:]","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"If you inspect those row labels closely, you may notice a pattern. Two labels appear multiple times, namely  11 and 25. The corresponding rows of A have been \"replicated\" a number of times. Each time, a new nonzero entry is added to the right whose order of magnitude is much larger than that of all other coefficients. At the polyhedral level, this \"replication\" of rows is reflected by an operation called wedging, which plays a crucial role in Santos' construction of a Hirsch counterexample from spindles like s.","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"The structure that we just observed will be extremely useful in \"guessing\" good 2-faces of the 20-dimensional spindle encoded in the file above. Before we examine its faces, let us first read the file and construct a Spindle object from it.","category":"page"},{"location":"tutorials/hirsch-ii/#Building-the-spindle","page":"Spindles and the Hirsch conjecture II","title":"Building the spindle","text":"","category":"section"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"A20, b20, labels = readineq(\"../../../examples/s-25.txt\", BigInt)\ns20 = Spindle(A20, b20)\n\ncollect(vertices(s20))[apices(s20)]","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"Note that s20 is simple:","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"using Graphs: degree\nall(degree(graph(s20)) .== dim(s20))","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"Its most important property, however, is the length of a shortest path between the apices:","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"dist(s20, apices(s20)...)","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"The Hirsch conjecture would imply that there must be a strictly shorter path, namely of length 20. Therefore, s20 is a counterexample to the Hirsch conjecture.","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"You may have noticed that computations in dimension 20 take longer than they did in dimension 5. Calling graph or dist for the first time on s20 (or any Spindles function that needs the graph, in fact) triggers the computation of the entire graph of s20. Luckily, we don't have to enumerate all 2-faces of s20 to identify good ones. Instead, we may take advantage of the structure in its coefficient matrix to \"guess\" good 2-faces.","category":"page"},{"location":"tutorials/hirsch-ii/#Guessing-good-2-faces","page":"Spindles and the Hirsch conjecture II","title":"Guessing good 2-faces","text":"","category":"section"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"For example, here is one of the good 2-faces of s again:","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"face = [2,8,9]\nisgood2face(s, face).good","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"The corresponding facets of s20 are","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"face20 = [i for (i,label) in enumerate(labels) if parse(Int, label) in face]","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"However, three facets do not make a 2-face in dimension 20 yet. We need another 15 facet-defining inequalities from the description of s20. With some geometric intuition of what the wedging operation does, we propose the following rule of thumb: To get up to 18 facets, pick facets from those two blocks of \"replications\" labeled 11 and 25. Specifically, from each block, pick all facets but one. Let us calculate the number of facets in each block:","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"sum(labels .== \"11\"), sum(labels .== \"25\")","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"So, in total, our proposed rule of thumb would indeed give us the desired number of 9+8-2=15 facets. Let us \"validate\" this rule on face.","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"blocks = [findall(labels .== ref) for ref in [\"11\", \"25\"]]  # all row indices in either of the two blocks\nface20 = [face20; blocks[1][2:end]; blocks[2][2:end]]\njoin(unique(labels[face20]), \" \")","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"This is the face we would expect to be a good 2-face. Let's check whether it really is:","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"isgood2face(s20, face20).good","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"Great! By omitting the first facet from each block, we immediately found a good 2-face of s20. Let us plot this face and the original face face side by side.","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"plot(\n    plot2face(s, face; vertexlabels=nothing),\n    plot2face(s20, face20; vertexlabels=nothing, ineqlabels=labels),\n    layout=grid(1,2), size=(800,300)\n)","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"Not only do their projections look very similar, they are also combinatorially almost identical. To see this, let us make plots of their graphs. For s20, we would like the same kind of vertex labels that we generated for the smaller spindle above:","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"dist_labels20 = map(1:nvertices(s20)) do v\n    \"$v\\n\" * join(dist.((s20,), apices(s20), v), \" | \")\nend","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"edges  = isgood2face(s, face).edges\nedges20 = isgood2face(s20, face20).edges\n\nplot(\n    plot2face(s, face; directed_edges=edges, vertexlabels=dist_labels, usecoordinates=false),\n    plot2face(s20, face20; directed_edges=edges20, vertexlabels=dist_labels20, ineqlabels=labels, usecoordinates=false),\n    layout=grid(1,2), size=(800,400)\n)","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"The figure on the right is the graph of the 2-face in dimension 20, with facets labeled by which facets of the 5-dimensional spindle s they correspond to. Combinatorially, the only change is an additional edge (the one defined by 4). Most importantly, however, the property of being good is preserved.","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"Next, let us take this one step further and find such a good 2-face in dimension 20 for each of the good 2-faces of s.","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"","category":"page"},{"location":"tutorials/hirsch-ii/","page":"Spindles and the Hirsch conjecture II","title":"Spindles and the Hirsch conjecture II","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/io/#File-I/O","page":"File I/O","title":"File I/O","text":"","category":"section"},{"location":"man/io/","page":"File I/O","title":"File I/O","text":"readineq","category":"page"},{"location":"man/io/#Spindles.readineq","page":"File I/O","title":"Spindles.readineq","text":"readineq(filename, T [, comment_char])\n\nFile format: labels b -A Return A, b, labels where A is a matrix of type Rational{T}.\n\nLines starting with a comment_char character (default is '#') and all characters on a line following  a comment_char are ignored.\n\nExamples\n\njulia> str = \"# unit square\\na 1 -1 0\\nb 1 0 -1\\nc 1 1 0\\nd 1 0 1\";\n\njulia> println(str)\n# unit square\na 1 -1 0\nb 1 0 -1\nc 1 1 0\nd 1 0 1\n\njulia> open(\"square.txt\", \"w\") do io\n           write(io, str)\n       end;\n\njulia> A, b, labels = readineq(\"square.txt\", Int);\n\njulia> A\n4×2 Matrix{Rational{Int64}}:\n  1   0\n  0   1\n -1   0\n  0  -1\n\njulia> b\n4-element Vector{Rational{Int64}}:\n 1\n 1\n 1\n 1\n\njulia> labels\n4-element Vector{String}:\n \"a\"\n \"b\"\n \"c\"\n \"d\"\n\njulia> rm(\"square.txt\")\n\n\n\n\n\n","category":"function"},{"location":"man/io/","page":"File I/O","title":"File I/O","text":"Spindles.writeineq","category":"page"},{"location":"man/io/#Spindles.writeineq","page":"File I/O","title":"Spindles.writeineq","text":"writeineq(outfilename, A::AbstractMatrix, b::AbstractVector [, labels, labels_plusminus, comments, comment_char])\n\nWrite the inequality description Ax le b to outfilename.\n\nThe file format is [labels b -A]. First column contains inequality labels.\n\nKeywords\n\nlabels: If not specified, use inequality indices.\nlabels_plusminus::Bool: Defaults to false\ncomments: Each element in comments will be printed on its own line, starting with comment_char  and a whitespace. Possible internal line breaks are ignored.\ncomment_char: default is '#'\n\n\n\n\n\n","category":"function"},{"location":"man/io/","page":"File I/O","title":"File I/O","text":"Spindles.readrational","category":"page"},{"location":"man/io/#Spindles.readrational","page":"File I/O","title":"Spindles.readrational","text":"readrational(filename, T)\n\nT type of numerator and denominator\n\n\n\n\n\n","category":"function"},{"location":"man/plots/#Plotting-faces","page":"Plots","title":"Plotting faces","text":"","category":"section"},{"location":"man/plots/","page":"Plots","title":"Plots","text":"Being a package focused on detecting faces of special polytopes with certain (combinatorial or geometric)  properties, Spindles.jl provides a function to visualize 2-faces. Often drawings help understand these  properties, which is why these documentation pages try to visualize as much as possible.","category":"page"},{"location":"man/plots/","page":"Plots","title":"Plots","text":"note: Implementation note\nThe implementation in Spindles.jl heavily relies on Plots, much like the visualization utilities of Polyhedra. In fact, there is nothing specific to spindles in the implementation of the plotting function described below; it would work for 2-faces of any polytope. However, the reason for including a bespoke visualization tool in Spindles.jl is the package design decision to offer lean solutions that serve the initial purpose of supporting theoretical explorations without much coding overhead.","category":"page"},{"location":"man/plots/","page":"Plots","title":"Plots","text":"The plotting function of Spindles.jl is called plot2face and is best described using an example. ","category":"page"},{"location":"man/plots/#Example","page":"Plots","title":"Example","text":"","category":"section"},{"location":"man/plots/","page":"Plots","title":"Plots","text":"We will use the following simple spindle, a square in 2D.","category":"page"},{"location":"man/plots/","page":"Plots","title":"Plots","text":"using Spindles #hide\nsquare = Spindle([1 0; 0 1; -1 0; 0 -1], [1, 1, 1, 1])\nvertices(square)","category":"page"},{"location":"man/plots/","page":"Plots","title":"Plots","text":"Since square is two-dimensional already, the most basic form of calling plot2face  just takes as arguments the spindle and a list of inequality/facet indices that define the face to be drawn. In our example, this list is empty to get the maximal face, the spindle itself:","category":"page"},{"location":"man/plots/","page":"Plots","title":"Plots","text":"plot2face(square, Int[])","category":"page"},{"location":"man/plots/","page":"Plots","title":"Plots","text":"By default, vertices are labeled by their index in vertices(square). The edge labels indicate which facet-defining inequalities for square define the edge. We may relabel vertices and edges using the keyword  arguments vertexlabels and ineqlabels as follows:","category":"page"},{"location":"man/plots/","page":"Plots","title":"Plots","text":"plot2face(square, Int[]; vertexlabels=[\"a\", \"b\", \"c\", \"d\"], ineqlabels=[\"^\", \"*\", \"+\", \"-\"])","category":"page"},{"location":"man/plots/","page":"Plots","title":"Plots","text":"If we are only interested in the combinatorics of square (which of course isn't all too interesting), we can tell plot2face to make a plot of the graph of square, where vertices are placed equidistantly on a cycle. In our example, this of course does not change too much:","category":"page"},{"location":"man/plots/","page":"Plots","title":"Plots","text":"plot2face(square, Int[]; usecoordinates=false)","category":"page"},{"location":"man/plots/","page":"Plots","title":"Plots","text":"Another option that has its origins in the theoretical analysis of 2-faces allows for marking up a pair of edges. To see the effect, let us drop the edge labels for the moment. This is achieved by setting ineqlabels to nothing.","category":"page"},{"location":"man/plots/","page":"Plots","title":"Plots","text":"plot2face(square, Int[]; ineqlabels=nothing, directed_edges=([1,3], [2,4]))","category":"page"},{"location":"man/plots/","page":"Plots","title":"Plots","text":"Now perturb the square slightly so that those two edges are no longer parallel.","category":"page"},{"location":"man/plots/","page":"Plots","title":"Plots","text":"perturbed_square = Spindle([1 -1//8; 0 1; -1 -1//8; 0 -1], [9//8, 1, 9//8, 1])\nvertices(perturbed_square)","category":"page"},{"location":"man/plots/","page":"Plots","title":"Plots","text":"plot2face(perturbed_square, Int[]; ineqlabels=nothing, directed_edges=([1,3], [2,4]))","category":"page"},{"location":"man/plots/#Full-reference","page":"Plots","title":"Full reference","text":"","category":"section"},{"location":"man/plots/","page":"Plots","title":"Plots","text":"plot2face","category":"page"},{"location":"man/plots/#Spindles.plot2face","page":"Plots","title":"Spindles.plot2face","text":"plot2face(\n    s::Spindle, indices;\n    usecoordinates = true,\n    vertexlabels = ,\n    ineqlabels = ,\n    directed_edges = nothing,\n    # plot kw args\n    kw...\n)\n\nMake a plot of the 2-face of s that is defined by the inequalities in indices,  either as a 2D projection onto the plane (if the argument usecoordinates is set to true) or as a (combinatorial) plot of its graph otherwise.\n\nKeywords\n\nusecoordinates: If true (default), plot a 2D projection. Otherwise draw the graph.\nvertexlabels: A list of strings or nothing to suppress labels. Default: ... vertexlabels[i] for vertex i.\nineqlabels: A list of strings to be used as facet labels, or nothing to suppress labels. Default:\ndirected_edges: A tuple of edges ([s,t], [u,v]) that are drawn as directed edges. ...\n\nThe remaining keyword arguments kw... are passed to Plots.plot  and can be any plot, subplot, or axis attributes. See the Plots documentation pages  for a list of available attributes. Some of them are used by plot2face with a  different default value than in Plots. Notable keyword arguments among those are:\n\nsize: A tuple of Integers that determines the plot size. Defaults here to (300,300).\naspect_ratio: Defaults to :equal if usecoordinates is false, and :auto otherwise  (default in Plots).\n\nThe default behaviour can be overwritten by explicitly passing new values as keyword arguments in kw... to plot2face. Anything in kw... takes precedence over the default behaviour in plot2face, except for (most) attributes related to annotations. They are hardcoded in plot2face.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"EditURL = \"../../../examples/firststeps.jl\"","category":"page"},{"location":"tutorials/firststeps/#First-steps","page":"First steps","title":"First steps","text":"","category":"section"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"(Image: )","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"This tutorial demonstrates the basic usage of Spindles.jl to create spindles and query basic properties.","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"note: Note\nThis tutorial is also available as a Jupyter notebook. Click on the badge above to view it in nbviewer.","category":"page"},{"location":"tutorials/firststeps/#Creating-a-spindle","page":"First steps","title":"Creating a spindle","text":"","category":"section"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"Recall that the special property of a spindle is the existence of two vertices (the apices) whose incident facets partition the set of all facets. In this tutorial, we will be working with one of the simplest examples of a spindle: a cube. For example, the unit cube in 3D is given by all points (x_1x_2x_3) that satisfy","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"beginaligned\n-1 le x_1 le 1 \n-1 le x_2 le 1 \n-1 le x_3 le 1\nendaligned","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"In matrix notation, this is equivalent to the system Ax le b where","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"A = [1 0 0; -1 0 0; 0 1 0; 0 -1 0; 0 0 1; 0 0 -1]","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"and","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"b = [1, 1, 1, 1, 1, 1]","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"Spindles.jl provides a data type for representing and analyzing spindles: Spindle. We may create an object of this type from our data A and b as follows:","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"using Spindles # hide\ncube = Spindle(A, b)","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"The Spindle constructor already computes two apices. They may be inspected by running","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"apices(cube)","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"This returns the two indices of the apices as they appear in the list of all (eight) vertices of cube. We may list the vertices explicitly as follows:","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"vertices(cube)","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"note: Note\nBy default, Spindles.jl uses exact rational arithmetic. Note that the components of each vertex returned by vertices are of type Rational with numerators and denominators of type BigInt to avoid integer overflows (see the Julia documentation pages on rational numbers and arbitrary-precision arithmetic).","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"So the first and last vertex in the list above can take the role of the apices cube. However, these two are not unique. In fact, for a cube there are many possible pairs of apices: Take an arbitrary vertex and its antipodal one, i.e., the vertex obtained by flipping the sign of each component. If we want to prescribe an apex, we can use the function setapex! that takes as input the index of a vertex of our choice and tries to find a matching second one for a pair of apices:","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"setapex!(cube, 3)","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"warning: Warning\nsetapex! overwrites the previously computed apices.","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"Calling the function apices again now returns","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"apices(cube)","category":"page"},{"location":"tutorials/firststeps/#Working-with-the-graph","page":"First steps","title":"Working with the graph","text":"","category":"section"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"We may even compute the distance between those two apices in the graph of cube:","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"dist(cube, apices(cube)...)","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"note: Note\nCalling dist always refers to the current apices as returned by apices. For example, the above call computes the distance between 3 and 6 (and not between 1 and 8).","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"Behind the scenes, the call to dist first computes the graph of cube. The graph can also be accessed directly using graph, which returns a graph of a type defined by the Graphs.jl package. For instance, we may verify the well-known fact that cubes are simple by using the functions dim and Graphs.degree:","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"using Graphs: degree\nall(degree(graph(cube)) .== dim(cube))","category":"page"},{"location":"tutorials/firststeps/#Counting-and-enumerating-faces","page":"First steps","title":"Counting and enumerating faces","text":"","category":"section"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"Spindles.jl also provides functions to count and enumerate the faces of cube. The following call to facesofdim returns a list of all two-dimensional faces, each one given by the indices of its incident facets.","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"note: Note\nNote here that facet indices refer to the corresponding rows of the coefficient matrix A.","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"facesofdim(cube, 2)","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"Given that the two-dimensional faces of cube are precisely the six facets, this should not be too surprising.","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"tip: Tip\nTo count the faces of a given dimension without explicitly producing a list, use the function nfacesofdim.","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"Let us list all vertices contained in the first facet.","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"for v in incidentvertices(cube, [1])\n    println(collect(vertices(cube))[v])\nend","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"As expected, we obtain precisely the four vertices whose first component is equal to one.","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"note: Note\nvertices returns an iterator. To access a specific element, use collect as in the code above.","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/faces/#Faces","page":"Faces","title":"Faces","text":"","category":"section"},{"location":"man/faces/","page":"Faces","title":"Faces","text":"DocTestSetup = quote\n    push!(LOAD_PATH, \"../../src\")\n    using Spindles\nend","category":"page"},{"location":"man/faces/#Enumeration","page":"Faces","title":"Enumeration","text":"","category":"section"},{"location":"man/faces/","page":"Faces","title":"Faces","text":"graph","category":"page"},{"location":"man/faces/#Spindles.graph","page":"Faces","title":"Spindles.graph","text":"graph(s::Spindle)\n\nReturn the graph (aka 1-skeleton) of s, which is a simple undirected graph of type  Graphs.SimpleGraphs.SimpleGraph.\n\n\n\n\n\n","category":"function"},{"location":"man/faces/","page":"Faces","title":"Faces","text":"Spindles.jl implements an algorithm for enumerating all faces of a given dimension. On large inputs, this algorithm works best for near-simple spindles (with few degenerate vertices).","category":"page"},{"location":"man/faces/","page":"Faces","title":"Faces","text":"facesofdim","category":"page"},{"location":"man/faces/#Spindles.facesofdim","page":"Faces","title":"Spindles.facesofdim","text":"facesofdim(s::Spindle, k::Int)\n\nEnumerate all faces of dimension k of the spindle s. Each face is given by a list of the indices of its incident halfspaces/facets.\n\nnote: Note\nThe empty face emptyset (which is the unique face of dimension -1 by convention) is given by the list of all facet/halfspace indices, as the intersection of all facets of a polytope is empty.\n\nwarning: Difference to Polyhedra.jl\nThe index of a halfspace/facet is its index in the collection of halfspaces of the polyhedron underlying s, where hyperplanes are ignored. This is different from  the way that indices are treated in Polyhedra, where hyperplanes and halfspaces share the same set of indices.\n\nThe algorithm proceeds recursively and computes faces bottom-up, starting from the vertices. \n\nnote: Note\nResults are cached internally in the Spindle object s. Therefore, subsequent calls to facesofdim(s, l) for any l le k do not cost anything.\n\nSee also nfacesofdim.\n\n\n\n\n\n","category":"function"},{"location":"man/faces/","page":"Faces","title":"Faces","text":"nfacesofdim","category":"page"},{"location":"man/faces/#Spindles.nfacesofdim","page":"Faces","title":"Spindles.nfacesofdim","text":"nfacesofdim(s::Spindle, k::Int)\n\nCount the k-dimensional faces of the spindle s.  Shorthand for length(facesofdim(s, k)).\n\nSee also facesofdim.\n\n\n\n\n\n","category":"function"},{"location":"man/faces/#Length-of-paths","page":"Faces","title":"Length of paths","text":"","category":"section"},{"location":"man/faces/","page":"Faces","title":"Faces","text":"dist","category":"page"},{"location":"man/faces/#Spindles.dist","page":"Faces","title":"Spindles.dist","text":"dist(s::Spindle, apex::Int, v::Int)\n\nCompute the distance between apex and vertex v in the graph of spindle s.\n\nnote: Note\nResults are affected by resetting the apices with setapex!.\n\nExamples\n\njulia> square = Spindle([1 0; 0 1; -1 0; 0 -1], [1, 1, 1, 1]);\n\njulia> apx1, apx2 = setapex!(square, 1)\n2-element Vector{Int64}:\n 1\n 4\n\njulia> dist(square, apx1, 4)\n2\n\njulia> apx1, apx2 = setapex!(square, 2)\n2-element Vector{Int64}:\n 2\n 3\n\njulia> dist(square, apx1, 4)\n1\n\n\n\n\n\n","category":"function"},{"location":"man/faces/#Good-faces","page":"Faces","title":"Good faces","text":"","category":"section"},{"location":"man/faces/","page":"Faces","title":"Faces","text":"Spindles.FaceState","category":"page"},{"location":"man/faces/#Spindles.FaceState","page":"Faces","title":"Spindles.FaceState","text":"FaceState\n\nFields\n\ngood::Bool\nfacets: all incident facets\nedges\nvsets\n\n\n\n\n\n","category":"type"},{"location":"man/faces/","page":"Faces","title":"Faces","text":"isgood2face","category":"page"},{"location":"man/faces/#Spindles.isgood2face","page":"Faces","title":"Spindles.isgood2face","text":"isgood2face(s::Spindle, facets)\n\nTest the face defined by facets for being a good 2-face of the spindle s. Return a FaceState.\n\nSee this tutorial for an informal explanation of what it means for a 2-face to be good.\n\n\n\n\n\n","category":"function"},{"location":"#Spindles.jl","page":"Home","title":"Spindles.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The goal of Spindles.jl is to provide an interface for analyzing spindles.","category":"page"},{"location":"#What-is-a-spindle?","page":"Home","title":"What is a spindle?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A spindle is a polytope with two special vertices such that each facet contains exactly one of them. These two special vertices are called the apices of the spindle. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"A simple example is a cube: For each vertex u, there is a unique vertex v that does not share a facet with u (namely, the vertex that is \"antipodal\" to u). Any such pair u and v is a valid pair of apices for the cube.","category":"page"},{"location":"#Why-are-spindles-important?","page":"Home","title":"Why are spindles important?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Spindles play an important role in the construction of counterexamples to the Hirsch conjecture. In fact, a computational analysis of these counterexamples was the main driver of the development of Spindles.jl. More details can be found in this tutorial.","category":"page"},{"location":"#Why-develop-a-package-dedicated-to-spindles?","page":"Home","title":"Why develop a package dedicated to spindles?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are many great (and free) software packages and libraries for representing and manipulating polyhedra. In the Julia ecosystem specifically, there are","category":"page"},{"location":"","page":"Home","title":"Home","text":"Polyhedra.jl\nPolymake.jl: Julia wrapper for polymake and part of the OSCAR computer algebra system\nCDDLib.jl: Julia wrapper for cdd\nLRSLib.jl: Julia wrapper for lrs","category":"page"},{"location":"","page":"Home","title":"Home","text":"And this list is by no means exhaustive.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Since spindles are polyhedra, they can of course be built and analyzed with any of the packages in the list. In fact, Spindles.jl relies on Polyhedra.jl to enumerate vertices of a polytope, given only an inequality description of it.  What drove the development of a separate package specifically for spindles was research in polyhedral theory that required the computational analysis of certain properties of spindles with few lines of code. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"As Spindles.jl was born out of a research project, we are not sure how useful the package is to the broader community. However, one of the guiding design principles of Spindles.jl is to implement functions in such a way that they do not only apply to spindles and do not  only serve the initial research purpose. For example, the package implements a general-purpose algorithm to enumerate faces of polytopes (not just spindles) that follows ideas described here (see also the paper).","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the full API reference for more technical details on the package design and its functionalities.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Using Spindles.jl requires a working installation of Julia. Download files and detailed instructions are available on the Julia website.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To install Spindles.jl, clone the parent GitHub repository. In the Spindles subdirectory of your local clone, open the Julia REPL and enter Pkg mode by pressing ]. Then run","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> dev .","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nSee also the Pkg documentation on the dev (or develop) command.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You are now ready to use Spindles.jl by typing","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Spindles","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For the basic usage of Spindles.jl, please read the tutorial on first steps.  The full documentation can be found here.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To learn more about how Spindles.jl can help analyze counterexamples to the Hirsch conjecture, please check out this tutorial.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nIf you would like to run some of the examples presented in the tutorials yourself, you can view or download them as Jupyter notebooks. The links can be found on the respective tutorial pages.Note that the Julia kernel for Jupyter notebooks is required to run the example notebooks in your own Julia environment. It can be installed in Pkg mode by runningpkg> add IJulia\npkg> build IJulia","category":"page"},{"location":"man/api/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"man/api/","page":"Index","title":"Index","text":"","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"EditURL = \"../../../examples/hirsch-i.jl\"","category":"page"},{"location":"tutorials/hirsch-i/#Spindles-and-the-Hirsch-conjecture-I","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"","category":"section"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"(Image: )","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"In this tutorial, we will explore a particular spindle that is known from theory to have an interesting property: Its apices are far away from each other in the graph of the spindle. This property made it possible to disprove a long-standing conjecture in polyhedral theory, the so-called Hirsch conjecture. Even though the focus of this tutorial is on a thorough analysis of the special spindle, we will showcase some more advanced functionalities and customization options of Spindles.jl along the way. For the basic usage, please read this tutorial first.","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"note: Note\nThis tutorial is also available as a Jupyter notebook. Click on the badge above to view it in nbviewer.","category":"page"},{"location":"tutorials/hirsch-i/#The-Hirsch-conjecture","page":"Spindles and the Hirsch conjecture I","title":"The Hirsch conjecture","text":"","category":"section"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"The Hirsch conjecture for polytopes stated that any two vertices of a d-dimensional polytope with f facets can be connected by a path of at most f-d edges. It was disproved in 2010 when Francisco Santos found a construction that produces counterexamples from spindles with a special property: the length of a shortest path between the apices (called the length of the spindle) must be strictly greater than the dimension.","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"Santos' original counterexample from 2010 is based on a 5-dimensional spindle with 48 facets, for which the shortest path between the apices is of length 6. A minimal inequality description of this spindle (see Table 1 in Santos' paper) can be found in the file s-48-5.txt located in the examples folder beneath the package root directory Spindles.","category":"page"},{"location":"tutorials/hirsch-i/#Reading-a-spindle-from-a-file","page":"Spindles and the Hirsch conjecture I","title":"Reading a spindle from a file","text":"","category":"section"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"We may read the description from the file as follows.","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"using Spindles\nA, b, labels = readineq(\"../../../examples/s-48-5.txt\", Int);\nnothing #hide","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"[A b]","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"The function readineq does not only return the data in the inequality description Ax le b from the source but also the attached labels, one for each inequality.","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"labels","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"note: Note\nEven though we use the same set of labels as Santos in his paper, the assignment to the rows of A is different.","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"The resulting spindle s has","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"s = Spindle(A, b)\nnvertices(s)","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"vertices and its apices are","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"collect(vertices(s))[apices(s)]","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"The distance between them in the graph of s is indeed 6:","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"dist(s, apices(s)...)","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"Note that both apices are highly degenerate:","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"using Graphs: degree\ndegree(graph(s), apices(s))","category":"page"},{"location":"tutorials/hirsch-i/#Inspecting-faces","page":"Spindles and the Hirsch conjecture I","title":"Inspecting faces","text":"","category":"section"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"The original motivation for developing Spindles.jl was the search for special two-dimensional faces (or 2-faces for short) of the spindle s and similar spindles. To explain what we mean by \"special\", let us consider the following three facets (note that all inequalities in the description given in s-48-5.txt are indeed facet-defining):","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"face = [29, 37, 41]\nlabels[face]","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"They indeed define a 2-face of s:","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"face in facesofdim(s, 2)","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"To inspect face, we may use the function plot2face provided by Spindles.jl to make a plot.","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"plot2face(s, face; ineqlabels=labels)","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"Each vertex is labeled by its index. Edges and the face itself get their labels from the incident facets, since we passed the labels extracted above to the keyword argument ineqlabels. Note here that the three facets that contain face are omitted from the edge labels.","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"We may customize the above plot even further. For example, let's add more information to the vertex labels. To print the distances of each vertex to the two apices of s on a second line beneath the vertex index, we first generate all labels in the desired format. Here, we use the format \"dist1 | dist2\" for the second line of the label, where dist1 and dist2 are placeholders for the distances to apices(s)[1] and apices(s)[2], respectively.","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"dist_labels = map(1:nvertices(s)) do v\n    \"$v\\n\" * join(dist.((s,), apices(s), v), \" | \")\nend","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"note: Julia syntax\ndist.((s,), apices(s), v)is a shorthand for[dist(s, apex, v) for apex in apices(s)]Wrapping s in a tuple makes sure that the Julia \"broadcast dot\" is only applied to the second argument of dist, namely apices(s), and not to the first argument s (which is not iterable).","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"Our custom vertex labels can now be passed to plot2face as follows:","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"plot2face(s, face; ineqlabels=labels, vertexlabels=dist_labels, usecoordinates=false)","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"Note here that the (optional) additional argument usecoordinates=false changed the plot mode to a (combinatorial) drawing of the graph of the face 15⁺ 19⁺ 21⁺ rather than a planar projection of its true coordinates as above.","category":"page"},{"location":"tutorials/hirsch-i/#A-good-2-face","page":"Spindles and the Hirsch conjecture I","title":"A good 2-face","text":"","category":"section"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"Next, let's take a closer look at our custom labels in the plot that we just generated. For each vertex of the face, the sum of both distances on the second line of its label must be at least 6, since we know that there is no shorter path between the apices. In fact, there are (at least) two such shortest paths that traverse parts of the face: One of the apices of s actually is a vertex of the face, namely the first apex","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"apices(s)","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"at index 1. Start from there and take 3 steps to either 56 or 80. Both vertices are at distance 3 from the second apex, as their labels tell us. The only two vertices that are not visited on either of those two paths are 155 and 156, and they are also at distance 3 from the second apex.","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"So among the vertices of the face 15⁺ 19⁺ 21⁺, there are two special subsets: One subset of vertices, let us call it V_1, is \"close\" to the first apex (namely, take V_1 to be the apex 1 itself). The other subset V_2 (the subset consisting of 56, 155, 156, and 80) is disjoint from the first one, and each vertex in V_2 is \"close\" to the second apex . Here, \"close\" means that if we pick two arbitrary vertices, one from each subset, then the sum of their distances to the respectively closest apex is at most some given number k. In our case, any k ge 3 would work for this definition of being \"close\", since the distance of V_1 to apices(s)[1] is 0 and that of any vertex in V_2 to apices(s)[2] is 3.","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"Let's visualize the two sets V_1 and V_2. Again, we tweak the arguments passed to plot2face and label the vertices of the face by which set they belong to. For example, this can be achieved by","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"set_labels = map(1:nvertices(s)) do v\n    if v == 1\n        return \"$v ∈ V₁\"\n    elseif v in [56, 155, 156, 80]\n        return \"$v ∈ V₂\"\n    else\n        return \"$v\"  # default label for vertices in neither of the two sets\n    end\nend\nplot2face(s, face; ineqlabels=nothing, vertexlabels=set_labels, usecoordinates=false, title=\"V₁ and V₂\")","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"Note that there are exactly two edges of the face 15⁺ 19⁺ 21⁺ whose endpoints do not belong to neither V_1 nor V_2 (and, hence, are only labeled by their index in the plot above). These edges are those between 25 and 57, and between 33 and 81. Let's mark them up in the plot using the keyword argument directed_edges:","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"plot2face(s, face;\n    ineqlabels=nothing, vertexlabels=set_labels,\n\tdirected_edges=([25,57], [33,81]),\n    usecoordinates=false, title=\"V₁ and V₂\"\n)","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"Not only are the two edges marked up in the plot, they are also drawn as directed edges now. To see why (and how this direction is determined by plot2face), recall that each of them is contained in a shortest path between the apices of s that walks along parts of the face 15⁺ 19⁺ 21⁺. For example, coming from the second apex (the one not contained in the face) and heading towards the first apex 1, the two red edges are traversed in exactly the direction indicated above. If we look at the \"true\" geometry of 15⁺ 19⁺ 21⁺, though, we could also start from any vertex in V_2 and follow one of the two red arrows (through the interior of the face!) as far as possible without leaving the face.","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"plot2face(s, face;\n    ineqlabels=nothing, vertexlabels=set_labels,\n\tdirected_edges=([25,57], [33,81]),\n    usecoordinates=true, title=\"V₁ and V₂\"\n)","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"The geometry of the 2-face tells us that the point on the boundary that we hit must be on one of the two edges incident to the apex 1. From that point, we walk along the edge and reach 1 within (at most) two steps on the face, rather than three steps along its boundary. So, in a relaxed regime where paths may pass through the interior of a face, one might consider taking three edges steps from the second apex to some vertex in V_2, then apply the two-step \"shortcut\" through the interior of the face 15⁺ 19⁺ 21⁺, and end up at the first apex 1. This yields (at most) 5 steps in total. Recall that in the traditional regime where paths through the interior are forbidden, one cannot do better than 6 steps.","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"note: Note\nIt is important to note here that, unlike paths along edges, this shortcut has a direction associated to it. The direction is determined by the geometry of the 2-face 15⁺ 19⁺ 21⁺ and is indicated by the direction of the two red edges. When making a plot with plot2face as above, they are always drawn in such a way that the arrows \"point away\" from each other.","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"Shortcuts like this are precisely what makes faces such as 15⁺ 19⁺ 21⁺ interesting for analyzing s in the setting of the so-called circuit diameter conjecture, a relaxation of the Hirsch conjecture that allows for paths through the interior of a polytope.","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"Let us call a 2-face of a spindle a good 2-face if it allows for such a shortcut between the apices as above (regardless of its direction). Spindles.jl provides a function isgood2face that tests a face for being good.","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"isgood2face(s, face)","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"The result is wrapped in a bespoke data type called FaceState. The field good indicates whether or not the tested face is good, and the two vertex sets V_1 and V_2 that certify the property of being good are stored in the field vsets (see also the documentation on the FaceState type):","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"fstate = isgood2face(s, face)\nfstate.good, fstate.vsets","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"Feel free to compare the output with the sets V_1 and V_2 that we identified above.","category":"page"},{"location":"tutorials/hirsch-i/#Finding-all-good-2-faces","page":"Spindles and the Hirsch conjecture I","title":"Finding all good 2-faces","text":"","category":"section"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"Using isgood2face, all good 2-faces of s are easily enumerated.","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"for f in sort(facesofdim(s, 2))\n    if isgood2face(s, f).good\n        println(join(labels[f], \" \"))\n    end\nend","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"In particular, for each good 2-face, there must exist paths from both apices to some vertex on the face of total length at most 3. Interestingly, all 2-faces of s that satisfy this weaker condition are good:","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"for f in sort(facesofdim(s, 2))\n    min_total_length = sum(\n        minimum(\n            dist(s, a, v) for v in incidentvertices(s, f)\n        ) for a in apices(s)\n    )\n    if min_total_length <= 3\n        println(join(labels[f], \" \"), \"\\t\", isgood2face(s, f).good)\n    end\nend","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"If you would like to explore one of the actual counterexamples to the Hirsch conjecture that was built from a spindle like s, please read on here.","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"","category":"page"},{"location":"tutorials/hirsch-i/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"This page was generated using Literate.jl.","category":"page"}]
}
