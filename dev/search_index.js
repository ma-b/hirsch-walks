var documenterSearchIndex = {"docs":
[{"location":"man/representation/#Representation","page":"Representation","title":"Representation","text":"","category":"section"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"DocTestSetup = quote\n    import Polyhedra\nend","category":"page"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"Spindles","category":"page"},{"location":"man/representation/#Spindles","page":"Representation","title":"Spindles","text":"Main module in Spindles.jl.\n\nExports\n\nSpindle\n...\n\n\n\n\n\n","category":"module"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"The main type defined by Spindles.jl is","category":"page"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"Spindle","category":"page"},{"location":"man/representation/#Spindles.Spindle","page":"Representation","title":"Spindles.Spindle","text":"Spindle{T}\n\nMain type that represents a spindle.\n\n\n\n\n\n","category":"type"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"There are two possible ways to construct objects of this type. The first way explicitly uses Polyhedra:","category":"page"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"Spindle(p::Polyhedra.Polyhedron)","category":"page"},{"location":"man/representation/#Spindles.Spindle-Tuple{Polyhedron}","page":"Representation","title":"Spindles.Spindle","text":"Spindle{T}(p::Polyhedra.Polyhedron{T})\n\nCreate a spindle from the polyhedron p. If p is unbounded or there are no two apices among its vertices, throw an error. \n\nIf not specified, the element type T is the element type of p.\n\nSee also Polyhedra.polyhedron.\n\nExamples\n\njulia> using Polyhedra: polyhedron, vrep, hrep\n\njulia> p = polyhedron(vrep([0 0; 1 0; 0 1; 1 1]));\n\njulia> Spindle(p)\nSpindle{Rational{BigInt}}\n\ncreates the two-dimensional 0/1 cube whose vertices are (00)(10)(01), and (11). To construct from  such a V-representation a polyhedron that can be passed to the Spindle constructor, we used  Polyhedra.vrep.  Equivalently, we could have created it from an inequality description (an H-representation), for example from the system of inequalities\n\nbeginaligned\n0 le x_1 le 1 \n0 le x_2 le 1\nendaligned\n\nUsing Polyhedra.hrep,  this translates to\n\njulia> p = polyhedron(hrep([-1 0; 1 0; 0 -1; 0 1], [0, 1, 0, 1]));\n\njulia> Spindle(p)\nSpindle{Rational{BigInt}}\n\nNote that the 0/1 cube is a spindle. However, if we drop any of its vertices, this property is lost:\n\njulia> p = polyhedron(vrep([0 0; 1 0; 0 1]));\n\njulia> Spindle(p)\nERROR: ArgumentError: not a spindle: cannot find two apices\n[...]\n\nSimilarly, trying to create a spindle from a proper subset of the inequalities in the H-representation above results in an error:\n\njulia> p = polyhedron(hrep([-1 0; 1 0; 0 -1], [0, 1, 0]));\n\njulia> Spindle(p)\nERROR: ArgumentError: got an unbounded polyhedron\n[...]\n\n\n\n\n\n","category":"method"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"To make spindle constructions more convenient, there is a second constructor  that accepts the data of an H-representation and does not require any imports from Polyhedra:","category":"page"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"Spindle(A::AbstractMatrix{<:Real}, b::AbstractVector{<:Real}, lib::Union{Nothing, Polyhedra.Library}=nothing)","category":"page"},{"location":"man/representation/#Spindles.Spindle-2","page":"Representation","title":"Spindles.Spindle","text":"Spindle(A::AbstractMatrix, b::AbstractVector [, lib::Polyhedra.Library])\n\nCreate a spindle from its H-representation Ax le b. The optional argument lib specifies a library for polyhedral computations (the \"backend\" of Polyhedra.jl) and is passed to Polyhedra.hrep. If unspecified, use the default library implemented in Polyhedra.\n\nnote: Info\nSpindle(A, b, lib) is equivalent to Spindle(polyhedron(hrep(A, b), lib)).\n\nSee also the Polyhedra.jl documentation on libraries. A list of all supported libraries can be found on the JuliaPolyhedra website.\n\nExamples\n\nTo use CDDLib with exact rational arithmetic, do\n\nimport CDDLib\nSpindle(A, b, CDDLib.Library(:exact))\n\nnote: Note\nIf the lib argument is not specified, Spindle will infer the type of arithmetic used from the input data. This behaviour is inherited from the default library in Polyhedra. For example, changing some of the entries of the coefficient matrix in the examples above to floats producesjulia> Spindle([-1.0 0.0; 1 0; 0 -1; 0 1], [0, 1, 0, 1])\nSpindle{Float64}as opposed to Spindle{Rational{BigInt}}.\n\n\n\n\n\n","category":"type"},{"location":"man/representation/#Vertices-and-apices","page":"Representation","title":"Vertices and apices","text":"","category":"section"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"Spindles.vertices","category":"page"},{"location":"man/representation/#Spindles.vertices","page":"Representation","title":"Spindles.vertices","text":"vertices(s::Spindle)\n\nReturns an iterator over the vertices of the spindle s.\n\n\n\n\n\n","category":"function"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"nvertices","category":"page"},{"location":"man/representation/#Spindles.nvertices","page":"Representation","title":"Spindles.nvertices","text":"nvertices(s::Spindle)\n\nCount the vertices of s.\n\n\n\n\n\n","category":"function"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"apices","category":"page"},{"location":"man/representation/#Spindles.apices","page":"Representation","title":"Spindles.apices","text":"apices(s::Spindle)\n\nReturn the indices of a pair of vertices (the apices) of s for which each facet of s  is incident to exactly one of them.\n\n\n\n\n\n","category":"function"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"setapex!","category":"page"},{"location":"man/representation/#Spindles.setapex!","page":"Representation","title":"Spindles.setapex!","text":"setapex!(s::Spindle, apex::Int)\n\nTry to find the index v of a vertex of s such that v and apex are apices of s. If successful, overwrite the apices of s, or throw an error otherwise.\n\nExamples\n\njulia> square = Spindle([1 0; 0 1; -1 0; 0 -1], [1, 1, 1, 1]);\n\njulia> vertices(square)\n4-element iterator of Vector{Rational{BigInt}}:\n Rational{BigInt}[-1, -1]\n Rational{BigInt}[1, -1]\n Rational{BigInt}[-1, 1]\n Rational{BigInt}[1, 1]\n\njulia> apices(square)\n2-element Vector{Int64}:\n 1\n 4\n\njulia> setapex!(square, 2);\n\njulia> apices(square)\n2-element Vector{Int64}:\n 2\n 3\n\n\n\n\n\n","category":"function"},{"location":"man/representation/#Incidence","page":"Representation","title":"Incidence","text":"","category":"section"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"incidentvertices","category":"page"},{"location":"man/representation/#Spindles.incidentvertices","page":"Representation","title":"Spindles.incidentvertices","text":"incidentvertices(s::Spindle, facets)\n\nList the indices of all vertices of the spindle s that are incident with facets.\n\nnote: Note\nincidentvertices(s, Int[]) is equivalent to collect(1:nvertices(s)).\n\n\n\n\n\n","category":"function"},{"location":"man/representation/#Dimension","page":"Representation","title":"Dimension","text":"","category":"section"},{"location":"man/representation/","page":"Representation","title":"Representation","text":"Spindles.dim","category":"page"},{"location":"man/representation/#Spindles.dim","page":"Representation","title":"Spindles.dim","text":"dim(s::Spindle)\n\nCompute the dimension of the spindle s.\n\nThis is done by computing the length of a maximal chain in the face poset of s, i.e., a finite sequence of faces \n\nemptyset = F_-1 subsetneq F_0 subsetneq F_1 subsetneq dots subsetneq F_d\n\nfor which d is maximal among all such sequences. Then F_d must be s itself, and d is its dimension.\n\nSee also Polyhedra.dim.\n\n\n\n\n\n","category":"function"},{"location":"man/io/#File-I/O","page":"File I/O","title":"File I/O","text":"","category":"section"},{"location":"man/io/","page":"File I/O","title":"File I/O","text":"readineq","category":"page"},{"location":"man/io/#Spindles.readineq","page":"File I/O","title":"Spindles.readineq","text":"readineq(filename, T)\n\nFile format: labels b -A Return A, b, labels where A is a matrix of type Rational{T}.\n\nLines starting with a # character and all characters on a line following # are ignored.\n\nExamples\n\njulia> str = \"# unit square\\na 1 -1 0\\nb 1 0 -1\\nc 1 1 0\\nd 1 0 1\";\n\njulia> println(str)\n# unit square\na 1 -1 0\nb 1 0 -1\nc 1 1 0\nd 1 0 1\n\njulia> open(\"square.txt\", \"w\") do io\n           write(io, str)\n       end;\n\njulia> A, b, labels = readineq(\"square.txt\", Int);\n\njulia> A\n4Ã—2 Matrix{Rational{Int64}}:\n  1   0\n  0   1\n -1   0\n  0  -1\n\njulia> b\n4-element Vector{Rational{Int64}}:\n 1\n 1\n 1\n 1\n\njulia> labels\n4-element Vector{String}:\n \"a\"\n \"b\"\n \"c\"\n \"d\"\n\njulia> rm(\"square.txt\")\n\n\n\n\n\n","category":"function"},{"location":"man/io/","page":"File I/O","title":"File I/O","text":"Spindles.writeineq","category":"page"},{"location":"man/io/#Spindles.writeineq","page":"File I/O","title":"Spindles.writeineq","text":"writeineq(filename, outfilename [, plusminus])\n\nCreate file with inequality description in the form [b -A]. First column contains row/facet labels.\n\nWrite to outfilename.\n\nEach element in comments is a single line. Possible line breaks are ignored.\n\n\n\n\n\n","category":"function"},{"location":"man/io/","page":"File I/O","title":"File I/O","text":"Spindles.readrational","category":"page"},{"location":"man/io/#Spindles.readrational","page":"File I/O","title":"Spindles.readrational","text":"readrational(filename, T)\n\nT type of numerator and denominator\n\n\n\n\n\n","category":"function"},{"location":"man/plots/#Plotting-faces","page":"Plots","title":"Plotting faces","text":"","category":"section"},{"location":"man/plots/","page":"Plots","title":"Plots","text":"plot2face","category":"page"},{"location":"man/plots/#Spindles.plot2face","page":"Plots","title":"Spindles.plot2face","text":"plot2face(\n    s::Spindle, facets;\n    facetlabels = nothing,\n    usecoordinates = false,\n    showdist = false,\n    directed_edges = nothing,\n    figsize = (300,300)\n)\n\nPlot the 2-face of s specified by facets.\n\nKeywords\n\nfacetlabels: A list of strings to be used as facet labels.\nusecoordinates: If true, plot a 2-dimensional projection of the face. Otherwise draw its graph.\nshowdist: Annotate vertices with their respective distance to each apex of s.\ndirected_edges: A tuple of edges ([s,t], [u,v]) that are drawn as directed edges. ...\nfigsize: ...\n\n\n\n\n\n","category":"function"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"EditURL = \"../../../examples/firststeps.jl\"","category":"page"},{"location":"tutorials/firststeps/#First-steps","page":"First steps","title":"First steps","text":"","category":"section"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"(Image: )","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"This tutorial demonstrates the basic usage of Spindles.jl to create spindles and query basic properties.","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"note: Note\nThis tutorial is also available as a Jupyter notebook. Click on the badge above to view it in nbviewer.","category":"page"},{"location":"tutorials/firststeps/#Creating-a-spindle","page":"First steps","title":"Creating a spindle","text":"","category":"section"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"Recall that the special property of a spindle is the existence of two vertices (the apices) whose incident facets partition the set of all facets. In this tutorial, we will be working with one of the simplest examples of a spindle: a cube. For example, the unit cube in 3D is given by all points (x_1x_2x_3) that satisfy","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"-1 le x_1 le 1 quad -1 le x_2 le 1 quad -1 le x_3 le 1","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"In matrix notation, this is equivalent to the system Ax le b where","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"A = [1 0 0; -1 0 0; 0 1 0; 0 -1 0; 0 0 1; 0 0 -1]","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"and","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"b = [1, 1, 1, 1, 1, 1]","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"Spindles.jl provides a data type for representing and analyzing spindles: Spindle. We may create an object of this type from our data A and b as follows:","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"using Spindles # hide\ncube = Spindle(A, b)","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"The Spindle constructor already computes two apices. They may be inspected by running","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"apices(cube)","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"This returns the two indices of the apices as they appear in the list of all (eight) vertices of cube. We may list the vertices explicitly as follows:","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"vertices(cube)","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"note: Note\nBy default, Spindles.jl uses exact rational arithmetic. Note that the components of each vertex returned by vertices are of type Rational with numerators and denominators of type BigInt to avoid integer overflows (see the Julia documentation pages on rational numbers and arbitrary-precision arithmetic).","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"So the first and last vertex in the list above can take the role of the apices cube. However, these two are not unique. In fact, for a cube there are many possible pairs of apices: Take an arbitrary vertex and its antipodal one, i.e., the vertex obtained by flipping the sign of each component. If we want to prescribe an apex, we can use the function setapex! that takes as input the index of a vertex of our choice and tries to find a matching second one for a pair of apices:","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"setapex!(cube, 3)","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"warning: Warning\nsetapex! overwrites the previously computed apices.","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"Calling the function apices again now returns","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"apices(cube)","category":"page"},{"location":"tutorials/firststeps/#Working-with-the-graph","page":"First steps","title":"Working with the graph","text":"","category":"section"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"We may even compute the distance between those two apices in the graph of cube:","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"dist(cube, apices(cube)...)","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"note: Note\nCalling dist always refers to the current apices as returned by apices. For example, the above call computes the distance between 3 and 6 (and not between 1 and 8).","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"Behind the scenes, the call to dist first computes the graph of cube. The graph can also be accessed directly using graph, which returns a graph of a type defined by the Graphs.jl package. For instance, we may verify the well-known fact that cubes are simple by using the functions dim and Graphs.degree:","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"using Graphs: degree\nall(degree(graph(cube)) .== dim(cube))","category":"page"},{"location":"tutorials/firststeps/#Counting-and-enumerating-faces","page":"First steps","title":"Counting and enumerating faces","text":"","category":"section"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"Spindles.jl also provides functions to count and enumerate the faces of cube. The following call to facesofdim returns a list of all two-dimensional faces, each one given by the indices of its incident facets.","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"note: Note\nNote here that facet indices refer to the corresponding rows of the coefficient matrix A.","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"facesofdim(cube, 2)","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"Given that the two-dimensional faces of cube are precisely the six facets, this should not be too surprising.","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"tip: Tip\nTo count the faces of a given dimension without explicitly producing a list, use the function nfacesofdim.","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"Let us list all vertices contained in the first facet.","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"for v in incidentvertices(cube, [1])\n    println(collect(vertices(cube))[v])\nend","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"As expected, we obtain precisely the four vertices whose first component is equal to one.","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"note: Note\nvertices returns an iterator. To access a specific element, use collect as in the code above.","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"","category":"page"},{"location":"tutorials/firststeps/","page":"First steps","title":"First steps","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/faces/#Faces","page":"Faces","title":"Faces","text":"","category":"section"},{"location":"man/faces/","page":"Faces","title":"Faces","text":"DocTestSetup = quote\n    push!(LOAD_PATH, \"../../src\")\n    using Spindles\nend","category":"page"},{"location":"man/faces/#Enumeration","page":"Faces","title":"Enumeration","text":"","category":"section"},{"location":"man/faces/","page":"Faces","title":"Faces","text":"graph","category":"page"},{"location":"man/faces/#Spindles.graph","page":"Faces","title":"Spindles.graph","text":"graph(s::Spindle)\n\nReturn the graph (aka 1-skeleton) of s, which is a simple undirected graph of type  Graphs.SimpleGraphs.SimpleGraph.\n\n\n\n\n\n","category":"function"},{"location":"man/faces/","page":"Faces","title":"Faces","text":"Spindles.jl implements an algorithm for enumerating all faces of a given dimension. On large inputs, this algorithm works best for near-simple spindles (with few degenerate vertices).","category":"page"},{"location":"man/faces/","page":"Faces","title":"Faces","text":"facesofdim","category":"page"},{"location":"man/faces/#Spindles.facesofdim","page":"Faces","title":"Spindles.facesofdim","text":"facesofdim(s::Spindle, k::Int)\n\nEnumerate all faces of dimension k of the spindle s, each one given by a vector containing the indices of all  incident halfspaces/facets (starting at 1). Return them in one vector.\n\nnote: Note\ndifference from Polyhedra.Index\n\nRecursive bottom-up computation. Most (memory-)efficient for near-simple polytopes, for which faces are contained in few facets each.\n\n\n\n\n\n","category":"function"},{"location":"man/faces/","page":"Faces","title":"Faces","text":"nfacesofdim","category":"page"},{"location":"man/faces/#Spindles.nfacesofdim","page":"Faces","title":"Spindles.nfacesofdim","text":"nfacesofdim(s::Spindle, k::Int)\n\nCount the k-dimensional faces of the spindle s. ... Equivalent with length(facesofdim(s, k)) if not nothing. Uses the convention that the dimension of the empty face is -1.\n\n\n\n\n\n","category":"function"},{"location":"man/faces/#Length-of-paths","page":"Faces","title":"Length of paths","text":"","category":"section"},{"location":"man/faces/","page":"Faces","title":"Faces","text":"dist","category":"page"},{"location":"man/faces/#Spindles.dist","page":"Faces","title":"Spindles.dist","text":"dist(s::Spindle, apex::Int, v::Int)\n\nCompute the distance between apex and vertex v in the graph of spindle s.\n\nnote: Note\nResults are affected by resetting the apices with setapex!.\n\nExamples\n\njulia> square = Spindle([1 0; 0 1; -1 0; 0 -1], [1, 1, 1, 1]);\n\njulia> apx1, apx2 = setapex!(square, 1)\n2-element Vector{Int64}:\n 1\n 4\n\njulia> dist(square, apx1, 4)\n2\n\njulia> apx1, apx2 = setapex!(square, 2)\n2-element Vector{Int64}:\n 2\n 3\n\njulia> dist(square, apx1, 4)\n1\n\n\n\n\n\n","category":"function"},{"location":"man/faces/#Good-faces","page":"Faces","title":"Good faces","text":"","category":"section"},{"location":"man/faces/","page":"Faces","title":"Faces","text":"Spindles.FaceState","category":"page"},{"location":"man/faces/#Spindles.FaceState","page":"Faces","title":"Spindles.FaceState","text":"FaceState\n\nFields\n\ngood::Bool\nfacets: all incident facets\nedges\nvsets\n\n\n\n\n\n","category":"type"},{"location":"man/faces/","page":"Faces","title":"Faces","text":"isgood2face","category":"page"},{"location":"man/faces/#Spindles.isgood2face","page":"Faces","title":"Spindles.isgood2face","text":"isgood2face(s::Spindle, facets)\n\nTest the face defined by facets for being a good 2-face of the spindle s. Return a FaceState.\n\n(false, nothing, nothing) if not a good 2-face.\n\n\n\n\n\n","category":"function"},{"location":"#Spindles.jl","page":"Home","title":"Spindles.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The goal of Spindles.jl is to provide an interface for analyzing spindles.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#FAQ","page":"Home","title":"FAQ","text":"","category":"section"},{"location":"#What-is-a-spindle?","page":"Home","title":"What is a spindle?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A spindle is a polytope with two special vertices such that each facet contains exactly one of them. These two special vertices are called the apices of the spindle. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"A simple example is a cube: For each vertex u, there is a unique vertex v that does not share a facet with u (namely, the vertex that is \"antipodal\" to u). Any such pair u and v is a valid pair of apices for the cube.","category":"page"},{"location":"#Why-are-spindles-important?","page":"Home","title":"Why are spindles important?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Spindles play an important role in the construction of counterexamples to the Hirsch conjecture. In fact, a computational analysis of these counterexamples was the main driver of the development of Spindles.jl. More details can be found in this tutorial.","category":"page"},{"location":"#Why-develop-a-package-dedicated-to-spindles?","page":"Home","title":"Why develop a package dedicated to spindles?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Julia ecosystem offers interfaces to many libraries for polyhedral computations. Most notably, check out the Polyhedra.jl package. In fact, Spindles.jl is built on top of Polyhedra.jl. The main design choice in the development of Spindles.jl was to enable the computational analysis of certain properties of spindles with very few lines of code, while allowing extensions to other use cases. For example, the package implements a general-purpose algorithm to enumerate faces of polytopes (not just spindles) that follows ideas described here (see also the paper).","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the full API reference for more technical details on the package design and its functionalities.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Using Spindles.jl requires a working installation of Julia. Download files and detailed instructions are available on the Julia website.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To install Spindles.jl, clone the parent GitHub repository. In the Spindles subdirectory of your local clone, open the Julia REPL and enter Pkg mode by pressing ]. Then run","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> dev .","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nSee also the Pkg documentation on the dev (or develop) command.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You are now ready to use Spindles.jl by typing","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Spindles","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For a brief tour of the package and its basic usage, please read the tutorials.  The full documentation can be found here.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See also this Jupyter notebook for another tutorial that is specifically focused on applications of Spindles.jl to known counterexamples to the Hirsch conjecture.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nTo run the notebook in your own Julia environment, the Julia kernel for Jupyter notebooks is required. It can be installed in Pkg mode by runningpkg> add IJulia\npkg> build IJulia","category":"page"},{"location":"man/api/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"man/api/","page":"Index","title":"Index","text":"","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"EditURL = \"../../../examples/hirsch.jl\"","category":"page"},{"location":"tutorials/hirsch/#Spindles-and-the-Hirsch-conjecture","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture","text":"","category":"section"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"(Image: )","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"This tutorial showcases more advanced use cases of Spindles.jl. For its basic usage, please read this tutorial first.","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"note: Note\nThis tutorial is also available as a Jupyter notebook. Click on the badge above to view it in nbviewer.","category":"page"},{"location":"tutorials/hirsch/#The-Hirsch-conjecture","page":"Spindles and the Hirsch conjecture I","title":"The Hirsch conjecture","text":"","category":"section"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"The Hirsch conjecture for polytopes stated that any two vertices of a d-dimensional polytope with f facets can be connected by a path of at most f-d edges. It was disproved in 2010 when Francisco Santos found a construction that produces counterexamples from spindles with a special property: the length of a shortest path between the apices (called the length of the spindle) must be strictly greater than the dimension.","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"Santos' original counterexample from 2010 is based on a 5-dimensional spindle with 48 facets, for which the shortest path between the apices is of length 6. The minimal inequality description of this spindle (see Table 1 in Santos' paper) can be found in the file s-48-5.txt located in the examples folder beneath the package root.","category":"page"},{"location":"tutorials/hirsch/#Reading-a-spindle-from-a-file","page":"Spindles and the Hirsch conjecture I","title":"Reading a spindle from a file","text":"","category":"section"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"We may read the description from the file as follows.","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"using Spindles\nA, b, labels = readineq(\"../../../examples/s-48-5.txt\", Int);\nnothing #hide","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"[A b]","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"The function readineq does not only return the data in the inequality description Ax le b from the source but also the attached labels, one for each inequality.","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"labels","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"note: Note\nEven though we use the same set of labels as Santos in his paper, the assignment to the rows of A is different.","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"The apices are","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"s48 = Spindle(A, b)\ncollect(vertices(s48))[apices(s48)]","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"and the distance between them in the graph of s48 is indeed 6:","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"dist(s48, apices(s48)...)","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"Note that both apices are highly degenerate:","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"using Graphs: degree\ndegree(graph(s48), apices(s48))","category":"page"},{"location":"tutorials/hirsch/#Inspecting-faces","page":"Spindles and the Hirsch conjecture I","title":"Inspecting faces","text":"","category":"section"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"The original motivation for developing Spindles.jl was the search for special two-dimensional faces (or 2-faces for short) of the spindle s48 and similar spindles. To explain what we mean by \"special\", let us consider the following three facets:","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"face = [29, 37, 41]\nlabels[face]","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"They indeed define a 2-face of s48:","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"face in facesofdim(s48, 2)","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"We may use the function plot2face provided by Spindles.jl to plot the graph of this face.","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"plot2face(s48, face; facetlabels=labels, showdist=true, figsize=(400,400))\nnothing #hide","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"This produces the following output:","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"(Image: )","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"As one would expect from a 2-face, the graph is a cycle. Each vertex is labeled by its index (on the first line) and the distance to each of the two apices of s48 (on the second line). For example, 1 | 5 in the label of vertex 25 means that 25 is one edge step away from the first apex apices(s48)[1] and five steps away from apices(s48)[2]. Likewise, the label 0 | 6 for vertex 1 means that 1 is at distance 0 from apices(s)[1]. This should not be surprising given that 1 is the index of the first apex:","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"apices(s48)","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"Edges are labeled by their incident facets, where the three facets that define the face are omitted.","category":"page"},{"location":"tutorials/hirsch/#Good-2-faces","page":"Spindles and the Hirsch conjecture I","title":"Good 2-faces","text":"","category":"section"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"Note that for each vertex in the plot above, the sum of both distances must be at least 6 because we know that there is no shorter path between the apices. In fact, there are two such shortest paths that traverse parts of the face: Starting at the first apex 1, we may take 3 steps to either 56 or 80. Both vertices are at distance 3 from the second apex, as their labels tell us. The only two vertices that are not visited on either of those two paths are 155 and 156, and they are also at distance 3 from the second apex.","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"So among the vertices of the face 15+ 19+ 21+, there are two special subsets: One subset of vertices, let us call it V_1, is \"close\" to the first apex (namely, take V_1 to be the apex 1 itself). The other subset V_2 (the subset consisting of 56, 155, 156, and 80) is disjoint from the first one, and each vertex in V_2 is \"close\" to second apex . Here, \"close\" means that if we pick two arbitrary vertices, one from each subset, then the sum of their distances to the respectively closest apex is at most 3, which is 2 less than the dimension of s48. Moreover, each vertex in V_2 is at least 3 edge steps away from V_1 on the face.","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"Let us call 2-faces with this property good. Good 2-faces play an important role for analyzing s48 in the setting of the so-called circuit diameter conjecture, a relaxation of the Hirsch conjecture. Spindles.jl provides a function isgood2face that tests a face for being good.","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"isgood2face(s48, face)","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"The result is wrapped in a bespoke data type called FaceState. The field good indicates whether or not the tested face is good, and the two vertex sets V_1 and V_2 that certify the property of being good are stored in the field vsets (see also the documentation on the FaceState type):","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"fstate = isgood2face(s48, face)\nfstate.good, fstate.vsets","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"Let us plot it again, but this time not as a graph but as a two-dimensional projection. This is achieved by setting the option usecoordinates to true:","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"plot2face(\n\ts48, face; facetlabels=labels,\n\tshowdist=true, usecoordinates=true, directed_edges=fstate.edges, figsize=(400,400)\n)\nnothing #hide","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"Now the output is this:","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"(Image: )","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"We may also enumerate all good 2-faces of s48 as follows.","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"for f in sort(facesofdim(s48, 2))\n    if isgood2face(s48, f).good\n        println(join(labels[f], \" \"))\n    end\nend","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"In particular, for each good 2-face, there must exist paths from both apices to some vertex on the face of total length at most 3. Interestingly, all 2-faces of s48 that satisfy this weaker condition are good:","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"for f in sort(facesofdim(s48, 2))\n\tmin_total_length = sum(\n\t\tminimum(\n\t\t\tdist(s48, a, v) for v in incidentvertices(s48, f)\n\t\t) for a in apices(s48)\n\t)\n\tif min_total_length <= 3\n\t\tprintln(join(labels[f], \" \"), \"\\t\", isgood2face(s48, f).good)\n\tend\nend","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"If you would like to explore one of the actual counterexamples to the Hirsch conjecture that was built from a spindle like s48, please read on here.","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"","category":"page"},{"location":"tutorials/hirsch/","page":"Spindles and the Hirsch conjecture I","title":"Spindles and the Hirsch conjecture I","text":"This page was generated using Literate.jl.","category":"page"}]
}
